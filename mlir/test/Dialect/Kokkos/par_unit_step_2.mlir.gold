module {
  func.func @myfunc(%arg0: memref<?x?x?xf32>, %arg1: memref<?x?xf32>, %arg2: index, %arg3: index, %arg4: index) -> memref<?x?x?xf32> {
    %c1 = arith.constant 1 : index
    %cst = arith.constant 3.141590e+00 : f32
    %c0 = arith.constant 0 : index
    %0 = arith.subi %arg4, %c1 : index
    %1 = arith.addi %arg4, %arg3 : index
    %2 = arith.subi %1, %c1 : index
    %3 = arith.divui %2, %arg3 : index
    %4 = arith.subi %arg4, %c1 : index
    %5 = arith.addi %4, %arg3 : index
    %6 = arith.subi %5, %c1 : index
    %7 = arith.divui %6, %arg3 : index
    scf.parallel (%arg5, %arg6, %arg7) = (%c0, %c0, %c0) to (%0, %3, %7) step (%c1, %c1, %c1) {
      %8 = arith.addi %arg5, %c1 : index
      %9 = arith.muli %arg6, %arg3 : index
      %10 = arith.muli %arg7, %arg3 : index
      %11 = arith.addi %10, %c1 : index
      %12 = memref.load %arg0[%8, %9, %11] : memref<?x?x?xf32>
      %13 = arith.addf %12, %cst : f32
      memref.store %13, %arg0[%8, %9, %11] : memref<?x?x?xf32>
      scf.reduce 
    }
    return %arg0 : memref<?x?x?xf32>
  }
}

