module {
  func.func @loop3d(%arg0: memref<?x?x?x?xf32>, %arg1: memref<?x?x?xf32>, %arg2: memref<?x?xf32>, %arg3: memref<?xf32>) -> f32 {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c3 = arith.constant 3 : index
    %cst = arith.constant 0.000000e+00 : f32
    %dim = memref.dim %arg0, %c0 : memref<?x?x?x?xf32>
    %dim_0 = memref.dim %arg0, %c1 : memref<?x?x?x?xf32>
    %dim_1 = memref.dim %arg0, %c2 : memref<?x?x?x?xf32>
    %dim_2 = memref.dim %arg0, %c3 : memref<?x?x?x?xf32>
    %0 = "kokkos.team_parallel"(%dim, %dim_0, %dim_2) ({
    ^bb0(%arg4: index, %arg5: index, %arg6: index, %arg7: index):
      %1 = kokkos.range_parallel (%arg8) -> (%dim_0) -> f32 {
        %2 = scf.for %arg9 = %c0 to %dim_1 step %c1 iter_args(%arg10 = %cst) -> (f32) {
          %3 = kokkos.range_parallel (%arg11) -> (%dim_2) -> f32 {
            %5 = memref.load %arg0[%arg6, %arg8, %arg9, %arg11] : memref<?x?x?x?xf32>
            "kokkos.update_reduction"(%5, %cst) ({
            ^bb0(%arg12: f32, %arg13: f32):
              %6 = arith.addf %arg12, %arg13 : f32
              kokkos.yield %6 : f32
            }) : (f32, f32) -> ()
            kokkos.yield
          } {executionSpace = 2 : i64, parallelLevel = 3 : i64}
          "kokkos.single"() <{level = 1 : i64}> ({
            memref.store %3, %arg1[%arg6, %arg8, %arg9] : memref<?x?x?xf32>
            kokkos.yield
          }) : () -> ()
          %4 = arith.addf %arg10, %3 : f32
          scf.yield %4 : f32
        }
        "kokkos.single"() <{level = 1 : i64}> ({
          memref.store %2, %arg2[%arg6, %arg8] : memref<?x?xf32>
          kokkos.yield
        }) : () -> ()
        "kokkos.single"() <{level = 1 : i64}> ({
          "kokkos.update_reduction"(%2, %cst) ({
          ^bb0(%arg9: f32, %arg10: f32):
            %3 = arith.addf %arg9, %arg10 : f32
            kokkos.yield %3 : f32
          }) : (f32, f32) -> ()
          kokkos.yield
        }) : () -> ()
        kokkos.yield
      } {executionSpace = 2 : i64, parallelLevel = 2 : i64}
      "kokkos.single"() <{level = 0 : i64}> ({
        memref.store %1, %arg3[%arg6] : memref<?xf32>
        kokkos.yield
      }) : () -> ()
      "kokkos.team_barrier"() : () -> ()
      "kokkos.single"() <{level = 0 : i64}> ({
        "kokkos.update_reduction"(%1, %cst) ({
        ^bb0(%arg8: f32, %arg9: f32):
          %2 = arith.addf %arg8, %arg9 : f32
          kokkos.yield %2 : f32
        }) : (f32, f32) -> ()
        kokkos.yield
      }) : () -> ()
      "kokkos.team_barrier"() : () -> ()
      kokkos.yield
    }) : (index, index, index) -> f32
    return %0 : f32
  }
}

