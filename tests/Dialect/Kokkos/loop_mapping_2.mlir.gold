module {
  func.func @spmv(%arg0: memref<?xf64>, %arg1: memref<?xindex>, %arg2: memref<?xindex>, %arg3: memref<?xf64>, %arg4: memref<?xf64>) {
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %dim = memref.dim %arg0, %c0 : memref<?xf64>
    %0 = memref.load %arg1[%dim] : memref<?xindex>
    %1 = memref.load %arg1[%c0] : memref<?xindex>
    %2 = arith.subi %0, %1 : index
    %3 = arith.addi %2, %dim : index
    %4 = arith.subi %3, %c1 : index
    %5 = arith.divui %4, %dim : index
    "kokkos.thread_parallel"(%dim, %5) ({
    ^bb0(%arg5: index):
      %6 = memref.load %arg0[%arg5] : memref<?xf64>
      %7 = memref.load %arg1[%arg5] : memref<?xindex>
      %8 = arith.addi %arg5, %c1 : index
      %9 = memref.load %arg1[%8] : memref<?xindex>
      %10 = arith.subi %9, %7 : index
      %11 = kokkos.range_parallel (%arg6) -> (%10) -> f64 {
        %12 = arith.addi %7, %arg6 : index
        %13 = memref.load %arg2[%12] : memref<?xindex>
        %14 = memref.load %arg3[%12] : memref<?xf64>
        %15 = memref.load %arg4[%13] : memref<?xf64>
        %16 = arith.mulf %14, %15 : f64
        "kokkos.update_reduction"(%16, %6) ({
        ^bb0(%arg7: f64, %arg8: f64):
          %17 = arith.addf %arg7, %arg8 : f64
          kokkos.yield %17 : f64
        }) : (f64, f64) -> ()
        kokkos.yield
      } {executionSpace = 2 : i64, parallelLevel = 3 : i64}
      "kokkos.single"() <{level = 1 : i64}> ({
        memref.store %11, %arg0[%arg5] : memref<?xf64>
        kokkos.yield
      }) : () -> ()
      kokkos.yield
    }) : (index, index) -> ()
    return
  }
}

