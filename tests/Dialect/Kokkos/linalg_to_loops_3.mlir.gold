module {
  func.func @gemm(%arg0: memref<4096x4096xf32>, %arg1: memref<4096x4096xf32>, %arg2: memref<4096x4096xf32>) -> memref<4096x4096xf32> {
    %c0 = arith.constant 0 : index
    %c4096 = arith.constant 4096 : index
    %c1 = arith.constant 1 : index
    scf.parallel (%arg3, %arg4) = (%c0, %c0) to (%c4096, %c4096) step (%c1, %c1) {
      %0 = memref.load %arg2[%arg3, %arg4] : memref<4096x4096xf32>
      %1 = scf.parallel (%arg5) = (%c0) to (%c4096) step (%c1) init (%0) -> f32 {
        %2 = memref.load %arg0[%arg3, %arg5] : memref<4096x4096xf32>
        %3 = memref.load %arg1[%arg5, %arg4] : memref<4096x4096xf32>
        %4 = arith.mulf %2, %3 : f32
        scf.reduce(%4 : f32) {
        ^bb0(%arg6: f32, %arg7: f32):
          %5 = arith.addf %arg6, %arg7 : f32
          scf.reduce.return %5 : f32
        }
      }
      memref.store %1, %arg2[%arg3, %arg4] : memref<4096x4096xf32>
      scf.reduce 
    }
    return %arg2 : memref<4096x4096xf32>
  }
}

